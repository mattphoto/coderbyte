function SubstitutionCipher(abc1, abc2) {
  this.encode = function (str) {
    var encoded = "";
    var add = ""
    for (var i = 0; i < str.length; i++) {
      if (abc1.indexOf(str[i]) < 0) {
        add = str[i];
      } else {
        add = abc2.charAt(abc1.indexOf(str[i]));
      }
      encoded += add;
    }
    return encoded;
  };
  this.decode = function (str) {
    var decoded = "";
    var add = "";
    for (var i = 0; i < str.length; i++) {
      if (abc1.indexOf(str[i]) < 0) {
        add = str[i];
      } else {
        add = abc1.charAt(abc2.indexOf(str[i]));
      }
      decoded += add;
    }
    return decoded;
  };
}



function SubstitutionCipher(abc1, abc2) {
  this.encode = function (str) {
    return str.split('').map(function(s){return (t=abc1.indexOf(s))==-1?s:abc2[t];}).join('');
  }
  this.decode = function (str) {
    return new SubstitutionCipher(abc2, abc1).encode(str);
  }
}





var abc1 = "abcdefghijklmnopqrstuvwxyz";
var abc2 = "etaoinshrdlucmfwypvbgkjqxz";

var sub = new SubstitutionCipher(abc1, abc2);
sub.encode("abc") // => "eta"
sub.encode("xyz") // => "qxz"
sub.encode("aeiou") // => "eirfg"

sub.decode("eta") // => "abc"
sub.decode("qxz") // => "xyz"
sub.decode("eirfg") // => "aeiou"




function solution(fullText, searchText){
 
  var count = 0;
  for (var i = 0; i < fullText.length-searchText.length; i++) {
    if (searchText === fullText.slice(i, i+searchText.length)) {
      count++
    }
  }
  return count;
}


function solution(fullText, searchText){
  return fullText.split(searchText).length - 1;
}

// split on the search word and count result splits - 1.






if (nums)  //instead of
if (nums === null)


function numbers() {
  for (var i = 0; i < arguments.length; i++) {
    if(typeof arguments[i] != "number"){
      return false;
    }
  }
  return true;
}

function numbers(){
  return Array.prototype.slice.call(arguments).every(function(i){
    return typeof i == 'number'
  });
}

function numbers() {
  return [].every.call(arguments, function (v) { return typeof v === 'number'; });
}






function reject(array, iterator) {
  return array.filter(function(val){ return !iterator(val) })
}


var isAnagram = function(test, original) {
  var one = originial.split('').sort().join('').toLowerCase();
  var two = test.split('').sort().join('').toLowerCase();  

  if (one.length === two.length) {
    for (var i = 0; i < one.length; i++){
      if (one[i] !== two[i]) {
        return false;
      }
    }
    return true;
  }
  return false;
};





function likes(names) {

  var len = names.length-1;

  if (names === []) {
    return "no one likes this";
  }

  if (len === 0) {
    return names[0] + " likes this";
  }

  if (len === 1) {
    return names[0] + " and " + names[1] + " like this";
  }

  if (len === 2) {
    return names[0] + ", " + names[1] + " and " + names[2] + " like this";
  }

  if (len > 2) {
    return names[0] + ", " + names[1] + " and " + len - 1 + " others like this";
  }
}

likes(['Alex']);




function range(start, end, step) {
  var begin = 0;
  var increment = 1;
  var result = [];
  
  if (arguments.length === 1) {
    end = start;
  } else {
    begin = start;
  }

  if (typeof step === 'number') {
    increment = step;
  }

  if (step === 0) {
    for (var i = begin; i < end; i += 1) {
      result.push(begin);
    }
    return result;
  }
  
  console.log(start, end, step, begin, end, increment, result);

  for (var i = begin; i < end; i += increment) {
    result.push(i);
  }
  return result;
}

range(0,10,2);


// 



function range(start, end, step) {
  var res = [];

  end = arguments[1] || start;
  start = arguments.length > 1 ? arguments[0] : 0;
  step = arguments[2] != null ? arguments[2] : 1;

  for (var i = start; Math.abs(i) < Math.abs(end); i += (step || 1)) {
    res.push(start);
    start += step;
  }
  return res;
}